#+TITLE: IaC avec Terraform
#+AUTHOR: Nguyen Duy Tho
#+STARTUP: indent
* Introduction
- IaC: Description de l'infrastructure en utilisant une langage de configuration de haut niveau
- HCL Hashicorp Configuration Language: langage déclarative
- Déclarative vs Impérative
* Problématique
- Le développement des outils pour les processus d'automatisation du déploiement, de la maintenance et de la livraison continue de la plate-forme a entraîné un manque d'uniformité et une perte de contrôle pour leur gestion.
* Besoin
- Simplifier et uniformiser le développement et la maintenance des outils dans le processus d'automatisation afin d'en augmenter le contrôle. 
* Pourquoi Terraform vs scripts maison
- Scripts maison:
  - L'entretien
  - L'approche MVP (Minimum Viable Product) empêche la maintenabilité et l'ajout de fonctionnalité
  - Dépendance sur la compétence de certains membres
- Terraform:
  - logiciel libre, grande communauté
  - syntaxe simple et unifiée
  - multitude d'intégration avec les fournisseurs
  - approche déclarative (on déclare l'état désiré)
* Que supporte Terraform?
Les fournisseurs (providers):
- Les clouds majeurs: AWS, Azure, GCP, OCP, vSphere, ...
- Les petits clouds: DigitalOcean, Heroku, OpenStack, OVH, ...
- Les applications infrastructure: Chef, Consul, Vault, Docker, K8s, ...
- Réseautique: Cloudflare, DNS, HTTP, ...
- VCS: Bitbucket, Github, Gitlab
- Surveillance: Datadog, Grafana, New Relic, PagerDuty, ...
- Base de données: InfluxDB, MySQL, PostgreSQL
- Communautaire: EfficientIP, AD, Auth0, Artifactory, ...
* Fonctionnalités de Terraform
- IaC
- Plan d'exécution
- Graphe de ressources
- Automate de changement
* La colle pour l'infrastructure
- Code terraform pour former:
  - Grafana datasource
  - InfluxDB database
* Environnement de démo
** InfluxDB
#+BEGIN_SRC sh
docker run -p 8086:8086 influxdb
#+END_SRC
** Grafana
#+BEGIN_SRC sh
docker run -d --name=grafana -p 3000:3000 grafana/grafana
#+END_SRC
* Providers
#+BEGIN_SRC terraform
provider "grafana" {
  url  = "http://localhost:3000"
  auth = "admin:admin"
}

provider "influxdb" {
  url      = "http://localhost:8086"
  user     = "admin"
}

#+END_SRC
* Grafana
#+BEGIN_SRC terraform
resource "grafana_datasource" "metrics" {
  type          = "influxdb"
  name          = "awesome_app_metrics"
  url           = "http://localhost:8086"
  database_name = influxdb_database.metrics.name
}

#+END_SRC
* InfluxDB
#+BEGIN_SRC terraform
resource "influxdb_database" "metrics" {
  name = "awesome_app"
}
#+END_SRC
* Démo
** Application des ressources Terraform
#+BEGIN_SRC sh
git clone https://github.com/ntdt/demo-terraform.git
cd demo-terraform
terraform init
terraform plan
terraform apply
#+END_SRC
* Q & A
